using AsyncFlow.Core.Cache;
using AsyncFlow.Helpers;
using AsyncFlow.Interfaces;
using AsyncFlow.Responses;
using Hangfire;
using Hangfire.Server;
using AsyncFlow.Core;

public class TRequest_Executor:IExecutor<TRequest>
{
    private readonly IAsyncFlow<TRequest,TResult> _flow;
    private readonly IAsyncFlowCache _asyncFlowCache;

    public TRequest_Executor(IAsyncFlow<TRequest,TResult> flow, IAsyncFlowCache asyncFlowCache)
    {
        _flow = flow;
        _asyncFlowCache = asyncFlowCache;
    }

    [JobDisplayName("Processing {0}")]
    [Queue("TQueueName")]
    public async Task ExecuteAsync(string name,TRequest request, PerformContext? context,CancellationToken cancellationToken=default)
    {
        var progress=new DelegateProgress<ProgressData>(data=>context!.SetJobParameter("Progress",data));
        var result= await _flow.ProcessAsync(request,progress,cancellationToken);
        _asyncFlowCache.Set(context!.BackgroundJob.Id, result);
    }
}